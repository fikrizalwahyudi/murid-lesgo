import { Component } from '@angular/core';
import { NavController, NavParams, Platform, LoadingController, AlertController } from 'ionic-angular';
import { UserService } from '../../providers/user-service';
// import { Midtrans  } from '../../providers/midtrans';
import { DetailPage } from '../detail/detail';
import { OrderDetailPage } from '../order-detail/order-detail';
import { HomePage } from '../home/home';
import { Http, Response, RequestOptions, Headers } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import * as _ from 'lodash';
import * as moment from 'moment';
declare var snap;

/*
  Generated class for the Cart page.

  See http://ionicframework.com/docs/v2/components/#navigation for more info on
  Ionic pages and navigation.
*/

@Component({
  selector: 'page-cart',
  templateUrl: 'cart.html',
  providers: [UserService]
})
export class CartPage {
  public user: any = [];
  public token: any;
  public uid: any;
  public getData: any = [];
  public butOff: any = 'pesan';
  public total: any = 0;
  public subtotal: any = 0;
  public payment: any;
  public promo: any;
  public cartStatus: any;
  public cartHistoryStatus: any;
  public conFee: any = 0;
  public lespay: any;
  public cartData: any = [];
  public historyData: any = [];
  public userId: any;
  public platformType: any;

  constructor(public alert: AlertController, private http: Http, public navCtrl: NavController, public params: NavParams, public loadingCtrl: LoadingController, public userService: UserService, public platform: Platform) {

    if (this.platform.is('android')) {
      this.platformType == 'android';
    } else {
      this.platformType == 'browser';
    }

    this.payment = 'transfer';
    let loader = this.loadingCtrl.create({
      showBackdrop: false, spinner: 'hide'
    });
    loader.present();
    if (this.params.data.type == 'notification') {
      this.uid = this.params.data.additionalData.uid;
      this.butOff = 'riwayat';
      this.
    } else {
      this.uid = this.params.data.data;
    }
    console.log('this.uid', this.uid);
    console.log('this.params.data', this.params.data);
    this.getCart(this.uid);
    this.getUser(this.uid);
    loader.dismiss();

    //  if(this.params.data.cartData.length > 0 && this.params.data.cartData != undefined){
    //    this.historyData = this.params.data.cartData;
    //    this.cartData = _.remove(this.historyData,{status:'cart'});
    //    console.log(this.historyData);
    //  }
    // if(this.uid != undefined || this.uid != null){
    // console.log(this.uid);
    // // this.getCart(this.uid);
    //
    // loader.dismiss();
    // this.userService.getOrderCounter();
    //
    // }
    console.log(this.cartData);
    console.log(this.user);

  }
  getUser(uid) {
    var that = this;
    that.userService.getUserDataOnce(uid).subscribe(user => {
      that.user = user.val();
      that.user.phoneNumber = that.user.phoneNumber.replace("+62 ", "+62").replace("(", "").replace(")", "").replace(" ", "").replace("-", "").replace("_", "").replace("_", "");
    })
  }
  getCart(uid) {
    var that = this;
    this.userService.muridCariTutor(uid).subscribe(snapshot => {
      this.cartData = [];
      this.historyData = [];
      snapshot.forEach(e => {
        var data = e;
        data.orderId = e.$key;
        that.historyData.push(data);
      })
      that.cartData = _.remove(this.historyData, { status: 'cart' });
    })
  }
  extractData(res: Response) {
    let body = res.json();
    console.log(res.json());
    return body.data || {};
  }
  handleError(error: Response | any) {
    // In a real world app, you might use a remote logging infrastructure
    let errMsg: string;
    if (error instanceof Response) {
      const body = error.json() || '';
      const err = body.error || JSON.stringify(body);
      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
    } else {
      errMsg = error.message ? error.message : error.toString();
    }
    console.error(errMsg);
    return Observable.throw(errMsg);
  }
  getToken() {
    var that = this;
    var sendData = [];
    var transId = 'LP' + new Date().getTime();
    for (let i = 0; i < that.cartData.length; i++) {
      sendData.push({
        "id": that.cartData[i].orderId,
        "price": that.cartData[i].totalHarga,
        "quantity": 1,
        "name": that.cartData[i].tutorName + ' ' + that.cartData[i].orderSchedule.startDate + ' - ' + that.cartData[i].orderSchedule.endDate
      })

    }
    sendData.push({
      "id": "ConvenienceFee",
      "price": that.conFee,
      "quantity": 1,
      "name": "Convenience Fee"
    });
    let loader = that.loadingCtrl.create({
      showBackdrop: false,
      spinner: "hide"
    });
    loader.present();
    let headers = new Headers({ 'Content-Type': 'application/json' });
    let options = new RequestOptions({ headers: headers });

    var body = {
      "transaction_details": {
        "order_id": transId,
        "gross_amount": that.total

      },
      "item_details": sendData,
      "enabled_payments": ["mandiri_clickpay", "cimb_clicks",
        "bca_klikbca", "bca_klikpay", "bri_epay", "telkomsel_cash", "echannel",
        "bbm_money", "xl_tunai", "indosat_dompetku", "mandiri_ecash", "permata_va",
        "bca_va", "other_va", "kioson", "indomaret", "gci"],
      "customer_details": {
        "first_name": that.user.firstName,
        "last_name": that.user.lastName,
        "email": that.user.email,
        "phone": that.user.phoneNumber
      },
      "expiry": {
        "start_time": moment(new Date()).format('YYYY-MM-DD HH:mm:ss Z'),
        "unit": "minutes",
        "duration": 60
      }
    };
    console.log(body);
    that.http.post('http://13.228.37.52:4000/api/pay', body, options).subscribe(snapshot => {
      that.token = JSON.parse(snapshot['_body']).token;
      console.log(snapshot);
      loader.dismiss();

      snap.pay(that.token, {
        onSuccess: (result) => { that.presentAlert('Payment Success', 'Pembayaran Anda sudah diterima'); that.subtotal = 0; that.total = 0 },
        onPending: (result) => {
          that.presentAlert('Konfirmasi Pembayaran', 'Silahkan periksa email Anda atas order ini');
          that.subtotal = 0; that.total = 0;
          for (let i = 0; i < that.cartData.length; i++) {
            alert(transId)
            that.userService.updateCartStatus(that.cartData[i].orderId, { status: 'pending', transactionId: transId, createDate: moment().format('x') });
          }
        },
        onError: function (result) { that.presentAlert('Error', result); },
        onClose: () => { this.presentAlert('Payment Not Finish', 'Pembayaran tidak diselesaikan'); }
      });
    });
  };

  onChange(name) {
    if (this.butOff != name) {
      this.butOff = name;
    }
    else {
      this.butOff = 'empty';
    }
  }

  bayar() {
    alert('lanjutkan ke proses pembayaran, data anda telah kami terima')
  }

  getSubTotal() {
    this.subtotal = 0;
    for (let i = 0; i < this.cartData.length; i++) {
      this.subtotal = this.subtotal + this.cartData[i].totalHarga;
    }
  }

  theTotal() {
    this.total = 0;
    if (this.payment == "transfer") {
      this.conFee = 5700;
    }
    else if (this.payment == 'creditcard') {
      this.conFee = this.subtotal / 100 * 3.2;
    }
    this.total = this.subtotal + this.conFee;
  }
  orderDetail(orderid) {
    this.navCtrl.push(DetailPage, { data: orderid });
  }
  orderDetailCart(orderid) {
    console.log('masuk');
    this.navCtrl.push(OrderDetailPage, { data: orderid });
  }
  thousandMask(number) {
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
  }
  dismiss() {
    this.navCtrl.setRoot(HomePage, { data: '' });
  }
  removeOrder(id) {
    console.log(id);
    this.subtotal = 0;
    this.userService.removeFromCart(id);
  }
  displayDate(dates) {
    return moment(dates).format("DD-MMM-YYYY");
  }
  presentAlert(title, message) {
    let alert = this.alert.create({
      title: title,
      message: message,
      buttons: ['OK']
    });
    alert.present();
  }

  updateCartStatus(transId, status) {
    return this.userService.updateCartStatus(transId, { status: status });
  }
}
